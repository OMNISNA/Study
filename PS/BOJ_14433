#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int n,m,k1,k2,player,troll;
int visited[502];
int hero[502];
vector<int> pick[502];

int dfs(int now) {
  if (visited[now]) return 0;    
  visited[now] = 1;
  for (int i = 0; i<pick[now].size(); i++) {
    int value = pick[now][i];        
    if (!hero[value] || dfs(hero[value])) {    
      hero[value] = now;        
      return 1;
    }
  }
  return 0;
}

int bmatch(int n) {
    int ret = 0;
    for (int i = 1; i <= n; i++) {     
        fill(visited,visited+502,false);
        if (dfs(i))ret++;
    }
    return ret;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n >> m >> k1 >> k2;
  for(int i=0;i<k1;i++){
    cin >> player >> troll;
    pick[player].push_back(troll);
  }
  int n_max = bmatch(n);
  for(auto& v: pick){
    v.clear();
  }
  fill(hero,hero+502,false);
  fill(visited,visited+502,false);
  for(int i=0;i<k2;i++){
    cin >> player >> troll;
    pick[player].push_back(troll);
  }
  int m_max=bmatch(n);
  if(n_max<m_max)cout<<"네 다음 힐딱이";
  else cout<<"그만 알아보자";
}
