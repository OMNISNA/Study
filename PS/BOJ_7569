#include <iostream>
#include <algorithm>
#include <queue>
#include <utility>
using namespace std;

int dx[6]={1,-1,0,0,0,0};
int dy[6]={0,0,1,-1,0,0};
int dz[6]={0,0,0,0,1,-1};

struct toma{
  int x; int y; int z;
  toma(int a, int b, int c): x(a),y(b),z(c){}
};

int n,m,h;
int tomato[100][100][100]; 

void bfs(){
  queue<toma> q;
  for(int k=0;k<h;k++){
    for(int i=0;i<m;i++){
      for(int j=0;j<n;j++){
        if(tomato[i][j][k]==1)q.push(toma(i,j,k));
      }
    }
  }
  
  while(!q.empty()){
    int nx = q.front().x;
    int ny = q.front().y;
    int nz = q.front().z;
    q.pop();
    for(int i=0;i<6;i++){
      if(nx+dx[i]>=0&&nx+dx[i]<m&&ny+dy[i]>=0&&ny+dy[i]<n&&nz+dz[i]>=0&&nz+dz[i]<h&&tomato[nx+dx[i]][ny+dy[i]][nz+dz[i]]==0){
        tomato[nx+dx[i]][ny+dy[i]][nz+dz[i]]=tomato[nx][ny][nz]+1;
        q.push(toma(nx+dx[i],ny+dy[i],nz+dz[i]));
        
      }
    }
  }
}

int counter(){
	int cnt = 0;
  for(int k=0;k<h;k++){
    for(int i=0;i<m;i++){
	  	for(int j=0;j<n;j++){
		  	if(tomato[i][j][k]==0) {
		  		return -1;
		  	}
		  	cnt = max(cnt,tomato[i][j][k]);
	  	}
  	}
  }
	return cnt-1;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n >> m >> h;
  for(int k=0;k<h;k++){
    for(int i=0;i<m;i++){
      for(int j=0;j<n;j++){
        cin >> tomato[i][j][k]; 
      }
    }
  }
  bfs();
  cout << counter();
}
