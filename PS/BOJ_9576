#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
using namespace std;

int t,n,m,a,b;
int visited[1001]={0};
int book[1001]={0};
vector<int> pick[1001];
int dfs(int now) {
  if (visited[now]) return 0;    
  visited[now] = 1;
  for (int i = 0; i<pick[now].size(); i++) {
    int value = pick[now][i];        
    if (!book[value] || dfs(book[value])) {    
      book[value] = now;        
      return 1;
    }
  }
  return 0;
}

int bmatch(int n) {
    int ret = 0;
    for (int i = 1; i <= n; i++) {     
        fill(visited,visited+1001,false);
        if (dfs(i))ret++;
    }
    return ret;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> t;
  for(int k=0;k<t;k++){
    cin >> n >> m;
    for(int i=1;i<=m;i++){
      cin >> a >> b;
      for(int j=a;j<=b;j++){
        pick[i].push_back(j);
      }
    }
    cout << bmatch(m)<<"\n";
    for(auto& v: pick)v.clear();
    fill(visited,visited+1001,false);
    fill(book,book+1001,false);  
  }
}
